#include <stdio.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <string.h>
#include <linux/netlink.h>
#include <stdint.h>
#include <unistd.h>
#include <errno.h>

#define NETLINK_USER 22
#define USER_MSG    (NETLINK_USER + 1)
#define MSG_LEN 1000000
#define MAX_PLOAD 100

char rece_data[1000000]= {'\0'};
int i=0;

struct _my_msg {
    struct nlmsghdr hdr;
    int8_t  data[MSG_LEN];
};

int main(int argc, char **argv)
{
    int i;
    char data[1000]={'\0'};
    if(argc==2) //Have command line
    {
        if(argv[1][0]=='-'&&(argv[1][1]=='s'||argv[1][1]=='p')&&argv[1][2]=='\0') //the case that -s or -p,no get pid number
	{
            char pid[100]="";
            int pid_i=getpid();
            sprintf(pid,"%d",pid_i);
	    data[0]=argv[1][1]; //s or p
	    data[1]=' '; //need one space
            strcat(data,pid);
        }

	else if(argv[1][0]=='-'&&argv[1][1]=='c'&&argv[1][2]=='\0') //the case that -c,no get pid number
	{
		data[0]=argv[1][1];
		data[1]=' ';
		data[2]='1';
	}

	else if(argv[1][0]!='-')  //only exist pid number
	{
		data[0]='c';
		data[1]=' ';

		for(i=0;argv[1][i]!='\0';i++)
		{
			data[i+2]=argv[1][i];
		}
	}

	else //normal case ex:-c1,-s4,-p456...
	{
		data[0]=argv[1][1];
		data[1]=' ';

		for(i=2;argv[1][i]!='\0';i++)
                {
                        data[i]=argv[1][i];
                }
	}
    } 

    else //if no command,it's -c1
    {
        data[0]='c';
	data[1]=' ';
	data[2]='1';
    }
    struct sockaddr_nl  local, dest_addr;
    int skfd;
    struct nlmsghdr *nlh = NULL;
    struct _my_msg info;
    int ret;
    skfd = socket(AF_NETLINK, SOCK_RAW, USER_MSG);
    if(skfd == -1) {
        printf("create socket error...%s\n", strerror(errno));
        return -1;
    }
    memset(&local, 0, sizeof(local));
    local.nl_family = AF_NETLINK;
    local.nl_pid = 50;
    local.nl_groups = 0; //unicast
    if(bind(skfd, (struct sockaddr *)&local, sizeof(local)) != 0) {
        printf("bind() error\n");
        close(skfd);
        return -1;
    }
    memset(&dest_addr, 0, sizeof(dest_addr));
    dest_addr.nl_family = AF_NETLINK;
    dest_addr.nl_pid = 0; // to kernel
    dest_addr.nl_groups = 0;
    nlh = (struct nlmsghdr *)malloc(NLMSG_SPACE(MAX_PLOAD));
    memset(nlh, 0, sizeof(struct nlmsghdr));
    nlh->nlmsg_len = NLMSG_SPACE(MAX_PLOAD);
    nlh->nlmsg_flags = 0;
    nlh->nlmsg_type = 0;
    nlh->nlmsg_seq = 0;
    nlh->nlmsg_pid = local.nl_pid; //self port
    memcpy(NLMSG_DATA(nlh), data, strlen(data));
    ret = sendto(skfd, nlh, nlh->nlmsg_len, 0, (struct sockaddr *)&dest_addr, sizeof(struct sockaddr_nl));
    if(!ret) {
        perror("sendto error1\n");
        close(skfd);
        exit(-1);
    }
    //printf("wait kernel msg!\n");
    memset(&info, 0, sizeof(info));
    ret = recvfrom(skfd, &info, sizeof(struct _my_msg), 0, (struct sockaddr *)&dest_addr, sizeof(dest_addr));
    if(!ret) {
        perror("recv form kernel error\n");
        close(skfd);
        exit(-1);
    }
    for(i=0; i<strlen(info.data); i++) {
        rece_data[i]=info.data[i];
    }
    printf("%s\n", rece_data);
    close(skfd);
    free((void *)nlh);
    return 0;
}
